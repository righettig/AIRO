services:
  #------------#
  # Front-ends #
  #------------#
  users-app:
    depends_on:
      - users-gateway-api
    build:
      context: ./front-end/users/airo-users-frontend
    ports:
      - "5000:4200"
    environment:
      - USERS_GATEWAY_API_URL=${USERS_GATEWAY_API_URL}
    develop:
      watch:
        - action: sync
          path: ./front-end/users/airo-users-frontend
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./front-end/users/airo-users-frontend/package.json

  admin-app:
    depends_on:
      - admin-gateway-api
    build:
      context: ./front-end/admin/airo-admin-frontend
    ports:
      - "5001:3000"
    environment:
      - NEXT_PUBLIC_ADMIN_GATEWAY_API_URL=${ADMIN_GATEWAY_API_URL}
    develop:
      watch:
        - action: sync
          path: ./front-end/admin/airo-admin-frontend
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./front-end/admin/airo-admin-frontend/package.json

  enterprise-app:
    depends_on:
      - enterprise-gateway-api
    build:
      context: ./front-end/enterprise/airo-enterprise-frontend
    ports:
      - "5002:4200"
    environment:
      - ENTERPRISE_GATEWAY_API_URL=${ENTERPRISE_GATEWAY_API_URL}
    develop:
      watch:
        - action: sync
          path: ./front-end/enterprise/airo-enterprise-frontend
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./front-end/enterprise/airo-enterprise-frontend/package.json

  #--------------#
  # Gateway APIs #
  #--------------#
  users-gateway-api:
    depends_on:
      - auth-service
      - profile-service
      - notifications-service
      - billing-service
      - bots-service
      - purchase-service
      - events-service
      - event-simulation-service
      - ui-notifications-service
    build:
      context: ./back-end/gateways/airo-users-gateway-api
    ports:
      - "3000:3000"
    environment:
      - AUTH_API_URL=${AUTH_API_URL}
      - PROFILE_API_URL=${PROFILE_API_URL}
      - BILLING_API_URL=${BILLING_API_URL}
      - INVOICE_API_URL=${INVOICE_API_URL}
      - BOTS_API_URL=${BOTS_API_URL}
      - PURCHASE_API_URL=${PURCHASE_API_URL}
      - EVENTS_API_URL=${EVENTS_API_URL}
      - EVENT_SIMULATION_API_URL=${EVENT_SIMULATION_API_URL}
      - UI_NOTIFICATIONS_API_URL=${UI_NOTIFICATIONS_API_URL}
    develop:
      watch:
        - action: rebuild
          path: ./back-end/gateways/airo-users-gateway-api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./back-end/gateways/airo-users-gateway-api/package.json

  admin-gateway-api:
    depends_on:
      - admin-auth-service
      - bots-service
      - events-service
      - event-simulation-service
    build:
      context: ./back-end/gateways/airo-admin-gateway-api
    ports:
      - "3001:3000"
    environment:
      - ADMIN_AUTH_API_URL=${ADMIN_AUTH_API_URL}
      - BOTS_API_URL=${BOTS_API_URL}
      - EVENTS_API_URL=${EVENTS_API_URL}
      - EVENT_SIMULATION_API_URL=${EVENT_SIMULATION_API_URL}
    develop:
      watch:
        - action: rebuild
          path: ./back-end/gateways/airo-admin-gateway-api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./back-end/gateways/airo-admin-gateway-api/package.json

  enterprise-gateway-api:
    depends_on:
      - enterprise-auth-service
      - anybotics-service
    build:
      context: ./back-end/gateways/airo-enterprise-gateway-api
    ports:
      - "3002:3000"
      - "3003:3001" # signalR gateway
    environment:
      - AUTH_API_URL=${ENTERPRISE_AUTH_API_URL}
      - ANYBOTICS_SERVICE_URL=${ANYBOTICS_SERVICE_URL}
    develop:
      watch:
        - action: rebuild
          path: ./back-end/gateways/airo-enterprise-gateway-api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./back-end/gateways/airo-enterprise-gateway-api/package.json

  #---------------#
  # Microservices #
  #---------------#
  auth-service:
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-auth-microservice/Dockerfile
    environment:
      - FIREBASE_PROJECT_NAME=${FIREBASE_PROJECT_NAME}
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - FIREBASE_CONFIG_FILE=${FIREBASE_CONFIG_FILE}
      - JWT_AUTHORITY=${JWT_AUTHORITY}
      - CORS_ALLOWED_ORIGINS=${USERS_FRONT_END_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    ports:
      - "4000:8080" # https not working so far!
    volumes:
      - airo-config-volume:/app/config
    depends_on:
      - rabbitmq
  
  admin-auth-service:
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-admin-auth-microservice/Dockerfile
    environment:
      - FIREBASE_PROJECT_NAME=${ADMIN_FIREBASE_PROJECT_NAME}
      - FIREBASE_API_KEY=${ADMIN_FIREBASE_API_KEY}
      - FIREBASE_CONFIG_FILE=${ADMIN_FIREBASE_CONFIG_FILE}
      - JWT_AUTHORITY=${ADMIN_JWT_AUTHORITY}
      - CORS_ALLOWED_ORIGINS=${ADMIN_FRONT_END_URL}
    ports:
      - "4100:8080" # https not working so far!
    volumes:
      - airo-admin-config-volume:/app/config

  enterprise-auth-service:
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-admin-auth-microservice/Dockerfile
    environment:
      - FIREBASE_PROJECT_NAME=${ENTERPRISE_FIREBASE_PROJECT_NAME}
      - FIREBASE_API_KEY=${ENTERPRISE_FIREBASE_API_KEY}
      - FIREBASE_CONFIG_FILE=${ENTERPRISE_FIREBASE_CONFIG_FILE}
      - JWT_AUTHORITY=${ENTERPRISE_JWT_AUTHORITY}
      - CORS_ALLOWED_ORIGINS=${ENTERPRISE_FRONT_END_URL}
    ports:
      - "4200:8080" # https not working so far!
    volumes:
      - airo-enterprise-config-volume:/app/config

  profile-service:
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-profile-microservice/Dockerfile
    environment:
      - FIREBASE_PROJECT_NAME=${FIREBASE_PROJECT_NAME}
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - FIREBASE_CONFIG_FILE=${FIREBASE_CONFIG_FILE}
      - JWT_AUTHORITY=${JWT_AUTHORITY}
      - CORS_ALLOWED_ORIGINS=${USERS_FRONT_END_URL}
    ports:
      - "4001:8080" # https not working so far!
    volumes:
      - airo-config-volume:/app/config
  
  bots-service:
    depends_on:
      eventstore.db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-bots-microservice/Dockerfile
    environment:
      - EVENT_STORE_DB_URL=${EVENT_STORE_DB_URL}
    ports:
      - "4005:8080" # https not working so far!

  events-service:
    depends_on:
      eventstore.db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-events-microservice/Dockerfile
    environment:
      - EVENT_STORE_DB_URL=${EVENT_STORE_DB_URL}
    ports:
      - "4006:8080" # https not working so far!

  event-subscription-service:
    depends_on:
      rabbitmq:
        condition: service_healthy
      eventstore.db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-event-subscriptions-microservice/Dockerfile
    environment:
      - EVENT_STORE_DB_URL=${EVENT_STORE_DB_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    ports:
      - "4012:8080" # https not working so far!

  event-simulation-service:
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-event-simulation-microservice/Dockerfile
    ports:
      - "4011:8080" # https not working so far!  

  purchase-service:
    depends_on:
      eventstore.db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-purchase-microservice/Dockerfile
    environment:
      - EVENT_STORE_DB_URL=${EVENT_STORE_DB_URL}
    ports:
      - "4007:8080" # https not working so far!

  billing-service:
    build:
      context: ./back-end/microservices/airo-billing-microservice
    environment:
      - MONGO_URL=${BILLING_MONGO_DB_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    ports:
      - "4002:3000"
    depends_on:
      - mongodb
      - rabbitmq
    develop:
      watch:
        - action: rebuild
          path: ./back-end/microservices/airo-billing-microservice
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./back-end/microservices/airo-billing-microservice/package.json

  invoicing-service:
    build:
      context: ./back-end/microservices/airo-invoicing-microservice
    environment:
      - PROFILE_API_URL=${PROFILE_API_URL}
      - MONGO_URL=${INVOICE_MONGO_DB_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    ports:
      - "4003:3000"
    depends_on:
      - profile-service
      - mongodb
      - rabbitmq
    develop:
      watch:
        - action: rebuild
          path: ./back-end/microservices/airo-invoicing-microservice
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./back-end/microservices/airo-invoicing-microservice/package.json

  notifications-service:
    build:
      context: ./back-end/microservices/airo-notifications-microservice
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
    ports:
      - "4004:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ./back-end/microservices/airo-notifications-microservice
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./back-end/microservices/airo-notifications-microservice/package.json

  ui-notifications-service:
    build:
      context: ./back-end/microservices/airo-ui-notifications-microservice
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - COSMOSDB_ENDPOINT=${COSMOSDB_ENDPOINT}
      - COSMOSDB_KEY=${COSMOSDB_KEY}
    ports:
      - "4010:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      cosmosdb:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ./back-end/microservices/airo-ui-notifications-microservice
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./back-end/microservices/airo-ui-notifications-microservice/package.json

  notification-processor-service:
    depends_on:
      eventstore.db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./back-end/microservices/airo-notification-processor-microservice/Dockerfile
    environment:
      - EVENT_STORE_DB_URL=${EVENT_STORE_DB_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    volumes:
      - data-volume:/data

  #---------------#
  # External APIs #
  #---------------#
  anybotics-service:
    build:
      context: .
      dockerfile: ./back-end/external APIs/anybotics/anybotics-anymal-api/Dockerfile
    environment:
      - FIREBASE_PROJECT_NAME=${ENTERPRISE_FIREBASE_PROJECT_NAME}
      - FIREBASE_API_KEY=${ENTERPRISE_FIREBASE_API_KEY}
      - FIREBASE_CONFIG_FILE=${ENTERPRISE_FIREBASE_CONFIG_FILE}
      - JWT_AUTHORITY=${ENTERPRISE_JWT_AUTHORITY}
      - CORS_ALLOWED_ORIGINS=${ENTERPRISE_FRONT_END_URL}
    ports:
      - "4008:5002" # HTTP/1.1 for SignalR on this port
      - "4009:5001" # HTTP/2 for gRPC on this port
    volumes:
      - airo-enterprise-config-volume:/app/config

  #----------------------#
  # DBs & Message queues #
  #----------------------#
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"    # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management console port
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 45s
      timeout: 10s
      retries: 10

  mongodb:
    image: mongo:6.0
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db

  cosmosdb:
    # fix for: https://github.com/Azure/azure-cosmos-db-emulator-docker/issues/103
    image: cosmos-emulator-wrapper
    build:
      dockerfile_inline: |
        FROM mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
        RUN apt-get update && \
            DEBIAN_FRONTEND=noninteractive apt-get install -y \
            curl
    environment:
      - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=3
      - AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=true
    ports:
      - "8081:8081"
    volumes:
      - cosmos_data:/CosmosDB/data
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8081/_explorer/emulator.pem"]
      start_period: 1m
      interval: 30s
      timeout: 10s
      retries: 10

  eventstore.db:
    image: eventstore/eventstore:lts
    environment:
      - EVENTSTORE_INSECURE=true # let eventstore run without certificate
      - EVENTSTORE_EXT_TCP_PORT=1113 # set internal tcp port
      - EVENTSTORE_HTTP_PORT=2113 # set internal admin ui port
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
    ports:
      - "1113:1113" # map internal tcp port
      - "2113:2113" # map internal admin ui port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2113/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

    # While developing I can start with a fresh db by simply destroying the container.
    # Uncomment these lines to be able to retain data across restarts.
    # volumes:
    #   - type: volume
    #     source: eventstore-volume-data
    #     target: /var/lib/eventstore
    #   - type: volume
    #     source: eventstore-volume-logs
    #     target: /var/log/eventstore

  # When uncommenting to run e2e tests please update .env file with correct USERS_GATEWAY_API_URL for e2e
  # cypress:
  #   image: cypress/included:13.14.2
  #   depends_on:
  #     - users-app
  #   environment:
  #     # IMPORTANT: the internal post MUST be used here, otherwise cypress cannot find the app. Obviously this should be fixed!
  #     - CYPRESS_BASE_URL=http://users-app:4200
  #   working_dir: /e2e
  #   volumes:
  #     - ./front-end/users/airo-users-frontend:/e2e # Mount Cypress test folder

volumes:
  airo-config-volume:
    external: true
  
  airo-admin-config-volume:
    external: true 

  airo-enterprise-config-volume:
    external: true 
  
  data-volume:
  
  mongo_data:
  
  cosmos_data:

  eventstore-volume-data:
  eventstore-volume-logs: